#+TITLE: Using Databases In Haskell
#+AUTHOR: Chris Barrett
#+OPTIONS: toc:nil num:nil
[[./owl.jpg]]

* Overview

This is an introduction to the following Haskell libraries:

- [[http://www.stackage.org/package/persistent][Persistent]]
- [[https://hackage.haskell.org/package/esqueleto][Esqueleto]]
- [[https://github.com/bitemyapp/bloodhound][Bloodhound]]


You will learn:

- How to query relational databases like Postgres, and

- How to query ElasticSearch, a popular non-relational document store.


You will also see what Haskell looks like when written in anger.

* Preliminaries

- This is not a lecture! Interrupt me for questions


- I make the following assumptions:

  - You have a basic reading knowledge of Haskell

  - You have used a relational database.


* Postgres

We'll be using [[http://www.postgresql.org/][PostgreSQL]] (a.k.a. Postgres) for our examples. Postgres is a
freely available relational database system.

** OSX
#+BEGIN_SRC shell
  brew install postgres
#+END_SRC

** Debian & Ubuntu
#+BEGIN_SRC shell
  sudo apt-get install postgresql
#+END_SRC

** Windows
Follow the download [[http://www.postgresql.org/download/windows/][link]] on the PostgreSQL site.

* ElasticSearch

We will also use ElasticSearch. It is a document store that excels at
full-text search.

** OSX
#+BEGIN_SRC shell
  brew install elasticsearch
#+END_SRC

** Debian, Ubuntu
#+BEGIN_SRC shell
  sudo apt-get install elasticsearch
#+END_SRC

** Windows
Follow the download [[https://www.elastic.co/downloads/elasticsearch][link]] on the ElasticSearch site.

* Our Domain Model

[[./dogecoin.jpg]]

* Our Domain Model

[[./doge-mining.jpg]]

We will model a Dogecoin currency exchange.

- =doges= are users of the exchange
- =doges= have any number of =names=
- =doges= have =wallets=
- =wallets= have a non-negative balance
- doges can pool their resources and form a =pack=.

* Our Domain Model: SQL

** doges
#+BEGIN_SRC sql
  CREATE TABLE doges (
    id   SERIAL PRIMARY KEY
  );

  CREATE TABLE doge_names (
    id        SERIAL PRIMARY KEY,
    doge_id   INTEGER REFERENCES doges(id),
    doge_name TEXT NOT NULL
  );
#+END_SRC
** wallets
#+BEGIN_SRC sql
  CREATE TABLE wallets (
    id      SERIAL PRIMARY KEY,
    doge_id INTEGER REFERENCES doges(id),
    coins   INTEGER NOT NULL CHECK (coins >= 0)
  );
#+END_SRC
** packs
#+BEGIN_SRC sql
  CREATE TABLE packs (
    id        SERIAL PRIMARY KEY,
    pack_name TEXT NOT NULL
  );

  CREATE TABLE pack_members (
    id      SERIAL PRIMARY KEY,
    pack_id INTEGER REFERENCES packs(id),
    doge_id INTEGER REFERENCES doges(id)
  );
#+END_SRC

* Our Domain Model: Review

[[./pack.jpg]]

- =doges= have any number of =names=
- =doges= have =wallets=
- =wallets= have a non-negative balance
- doges can pool their resources and form a =pack=.

* Persistent: Overview

- Database-agnostic
  - Support for specific database backends are provided as plugins
  - MySQL
  - Postgres
  - SQLite

- Provides a DSL for modelling your schema

- Provides a simple typed DSL for queries, but you can also use raw SQL strings

- Manages DB migrations for you.

[[http://www.stackage.org/package/persistent][Stackage Link]]

* Persistent: Entities DSL

- Entities are written using a Template Haskell DSL
- Implements serialisation typeclasses for you
- Generates strongly-typed integer primary keys

** SQL
#+BEGIN_SRC sql
CREATE TABLE packs (
  id        SERIAL PRIMARY KEY,
  pack_name TEXT NOT NULL
);
#+END_SRC

** Persistent DSL
#+begin_example
Pack
  packName Text
#+end_example

* Persistent: Entities DSL
#+BEGIN_SRC haskell
  module Persistent.Entities where
  import           Data.Text           (Text)
  import           Database.Persist.TH

  mkPersist sqlSettings [persistLowerCase|

  Pack
    packName Text
    deriving Show

  |]
#+END_SRC

The code above is expanded into the following:

[[./cover-the-heart.jpg]]

#+BEGIN_SRC haskell
  data Pack = Pack { packPackName :: !Text }
    deriving (Show)

  type PackId = Key Pack

  instance PersistFieldSql Pack where
    sqlType _ = SqlString

  instance PersistField Pack where
    toPersistValue entity =
      PersistMap (zip (map pack ["packName"])
                      (map toPersistValue (toPersistFields entity)))

    fromPersistValue = runPersist <=< getPersistMap
      where
        runPersist x = fromPersistValues [name]
          where name = fromMaybe PersistNull (lookup (pack "packName") (fromList x))


  instance ToBackendKey SqlBackend Pack where
    toBackendKey = unPackKey
    fromBackendKey = PackKey


  instance PersistEntity Pack where
    type PersistEntityBackend Pack = SqlBackend
    data Unique Pack

    newtype Key Pack = PackKey {unPackKey :: BackendKey SqlBackend}
      deriving (Show, Read, Eq, Ord,
                PathPiece, PersistField, PersistFieldSql,
                ToJSON, FromJSON)

    data EntityField Pack typ = typ ~ Key Pack => PackId | typ ~ Text => PackPackName

    keyToValues x = [toPersistValue (unPackKey x)]

    keyFromValues = fmap PackKey . fromPersistValue . headNote

    toPersistFields (Pack x) = [SomePersistField x]


    fromPersistValues [x] =
      Pack <$> (mapLeft (fieldError (packPTH "packName")) . fromPersistValue) x

    fromPersistValues xs =
      Left (mappend
        (packPTH "Pack: fromPersistValues failed on: ")
        (pack (show xs)))


    persistUniqueToFieldNames _ = error "Degenerate case, should never happen"
    persistUniqueToValues     _ = error "Degenerate case, should never happen"

    persistUniqueKeys (Pack _) = []

    persistFieldDef PackId =
      FieldDef
        (HaskellName (packPTH "Id"))
        (DBName (packPTH "id"))
        (FTTypeCon Nothing (packPTH "PackId"))
        SqlInt64
        []
        True
        (ForeignRef (HaskellName (packPTH "Pack"))
                    (FTTypeCon (Just (packPTH "Data.Int")) (packPTH "Int64")))

    persistFieldDef PackPackName =
      FieldDef
        (HaskellName (packPTH "packName"))
        (DBName (packPTH "pack_name"))
        (FTTypeCon Nothing (packPTH "Text"))
        SqlString
        []
        True
        NoReference

    persistIdField = PackId

    fieldLens PackId = lensPTH entityKey (\ (Entity _ v) k -> Entity k v)

    fieldLens PackPackName = lensPTH (packPackName . entityVal)
                                     (\ (Entity k v) x -> Entity k (v {packPackName = x}))

    entityDef _ =
      EntityDef
        (HaskellName (packPTH "Pack"))
        (DBName (packPTH "pack"))
        (FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "PackId"))
            SqlInt64
            []
            True
            (ForeignRef
              (HaskellName (packPTH "Pack"))
              (FTTypeCon (Just (packPTH "Data.Int")) (packPTH "Int64"))))
        []
        [FieldDef
            (HaskellName (packPTH "packName"))
            (DBName (packPTH "pack_name"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            NoReference]
        []
        []
        [packPTH "Show"]
        (fromList [])
        False
#+END_SRC

* Persistent: Entities DSL (Full Example)

/Switch to code example/

* Esqueleto: Overview

- Type-safe SQL query DSL

- Builds on =persistent=

- Strives to mimic SQL while preserving type safety

* Esqueleto: Queries

- Uses

** SQL
#+BEGIN_SRC sql
  SELECT doge_id FROM Wallets WHERE coins > 0
#+END_SRC

** DSL
#+BEGIN_SRC haskell
  select $ from $ λwallet → do
  where_ (wallet ^. WalletCoins >. val 0)
  pure wallet
#+END_SRC

* Esqueleto: Queries
#+BEGIN_SRC haskell
  type MonadDB = ReaderT PG.SqlBackend

  nonEmptyWallets :: MonadIO m => MonadDB m [(Value (Key Doge))]
  nonEmptyWallets =
    select $
    from $ \wallet -> do
    where_ (wallet ^. WalletCoins >. val 0)
    pure (wallet ^. WalletDogeId)
#+END_SRC

* Bloodhound
